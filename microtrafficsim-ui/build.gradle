import org.gradle.internal.hash.HashUtil;

plugins {
    id 'application'
    id 'edu.sc.seis.macAppBundle' version '2.1.6'
    id 'nebula.ospackage' version '4.4.0'
}

dependencies {
    compile project(':microtrafficsim-core')

    // JUnit
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

// handle command line arguments via '-Dexec.args="..."'
run {
    if (System.getProperty("exec.args")) {
        args System.getProperty("exec.args").split()
    }
}

def distName = project.rootProject.ext.get("distname")
def distVersion = project.rootProject.ext.get("distver")
def distRelease = project.rootProject.ext.get("distrel")

def jarName = "${distName}-ui"

def main = 'microtrafficsim.ui.Main'


mainClassName = "${main}"
jar {
     manifest {
         attributes "Main-Class": "${main}"
     }

     from {
         configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     }
 }

macAppBundle {
    appName =  "${distName}"
    dmgName = "${distName}_${distVersion}-${distRelease}_all.app"

    icon = "${rootProject.projectDir}/resources/icon/microtrafficsim.icns"
    version = "${distVersion}-${distRelease}"

    mainClassName = "${main}"
    bundleJRE = false
}

ospackage {
    packageName = "${distName}"
    version = "${distVersion}"
    release = "${distRelease}"
    os = LINUX
    type = BINARY

    maintainer = 'github.com/sgs-us'
    uploaders = 'github.com/sgs-us'

    into "/usr/share/${distName}"

    from(jar.outputs.files) {
        into 'lib'
    }
    from(configurations.runtime) {
        into 'lib'
    }
    from(startScripts.outputDir) {
        into 'bin'
        exclude '*.bat'
        fileMode 0550
    }

    link("/usr/bin/${distName}", "/usr/share/${distName}/bin/${distName}")
}

task distRpm(type: Rpm) {
    dependsOn startScripts
}

task distDeb(type: Deb) {
    dependsOn startScripts

    packageGroup 'science'
}

distZip {
    archiveName = "${distName}_${distVersion}-${distRelease}_all.zip"

    into("${archiveName}/icon") {
        from "${rootProject.projectDir}/resources/icon/png"
    }
}

task writeArchPkgbuild() {
    dependsOn distZip

    doLast {
        def distZipName = "${distName}_${distVersion}-${distRelease}_all.zip"
        def distZipNameVar = "\${pkgname}_\${pkgver}-\${pkgrel}_all.zip"
        def distTag = "v\${pkgver}"
        def distZipUrl = "https://github.com/sgs-us/microtrafficsim/releases/download/${distTag}/${distZipNameVar}"
        def distZipSha256 = HashUtil.sha256(file("${->project.buildDir}/distributions/${distZipName}")).asHexString()
        def tmpdir = "${->project.buildDir}/tmp/archpkg"
        file(tmpdir).mkdirs()

        def pkgbuild = ""
        pkgbuild <<= "pkgname=${distName}\n"
        pkgbuild <<= "pkgver=${distVersion}\n"
        pkgbuild <<= "pkgrel=${distRelease}\n"
        pkgbuild <<= "pkgdesc='Microscopic Traffic Simulation using OpenStreetMap'\n"
        pkgbuild <<= "categories=\"Application;Science\"\n"
        pkgbuild <<= "arch=('any')\n"
        pkgbuild <<= "url='https://github.com/sgs-us/microtrafficsim/'\n"
        pkgbuild <<= "license=('GPL-3.0')\n"
        pkgbuild <<= "\n"
        pkgbuild <<= "depends=('java-environment')\n"
        pkgbuild <<= "makedepends=('gendesk')\n"
        pkgbuild <<= "source=(\"${distZipUrl}\")\n"
        pkgbuild <<= "sha256sums=('${distZipSha256}')\n"
        pkgbuild <<= "\n"
        pkgbuild <<= "build() {\n"
        pkgbuild <<= "    mv \"\${pkgname}/icon/512x512.png\" \${pkgname}.png\n"
        pkgbuild <<= "    rm -r \"\${pkgname}/icon\"\n"
        pkgbuild <<= "    rm \"\${pkgname}/bin/\${pkgname}.bat\"\n"
        pkgbuild <<= "    gendesk -f -n --pkgname \"\${pkgname}\" --pkgdesc \"\${pkgdesc}\" --categories \"\${categories}\"\n"
        pkgbuild <<= "}\n"
        pkgbuild <<= "\n"
        pkgbuild <<= "package() {\n"
        pkgbuild <<= "    mkdir -p \"\${pkgdir}/usr/\"{bin,share}\n"
        pkgbuild <<= "    cp -r \"\${pkgname}\" \"\${pkgdir}/usr/share/\"\n"
        pkgbuild <<= "    chmod 755 \"\${pkgdir}/usr/share/\${pkgname}/bin/\${pkgname}\"\n"
        pkgbuild <<= "    ln -s \"/usr/share/\${pkgname}/bin/\${pkgname}\" \"\${pkgdir}/usr/bin/\${pkgname}\"\n"
        pkgbuild <<= "    install -Dm644 \"\${pkgname}.desktop\" \"\${pkgdir}/usr/share/applications/\${pkgname}.desktop\"\n"
        pkgbuild <<= "    install -Dm644 \"\${pkgname}.png\" \"\${pkgdir}/usr/share/pixmaps/\${pkgname}.png\"\n"
        pkgbuild <<= "}\n"

        file("$tmpdir/PKGBUILD").write(pkgbuild.toString())
    }
}

task distArchPkg(type: Zip) {
    dependsOn writeArchPkgbuild

    from fileTree("${->project.buildDir}/tmp/archpkg") {
        into 'microtrafficsim'
    }

    destinationDir = file("${->project.buildDir}/distributions")
    archiveName = "${distName}_${distVersion}-${distRelease}_all.archlinux.zip"
}


task distAll {
    dependsOn distZip
    dependsOn distRpm
    dependsOn distDeb
    dependsOn distArchPkg
    dependsOn createAppZip
}


// set jar, distribution and application name
jar.baseName = "${jarName}"
distributions.main.baseName = "${jarName}"
startScripts.applicationName = "${distName}"

applicationDefaultJvmArgs = ['-Xmx3g']
